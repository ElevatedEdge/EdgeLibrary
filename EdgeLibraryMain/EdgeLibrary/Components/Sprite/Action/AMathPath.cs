using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Audio;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.GamerServices;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using Microsoft.Xna.Framework.Media;

namespace EdgeLibrary
{
    //Moves a sprite along a path generated by an equation
    public class AMathPath : Action
    {
        //Stores the equation
        public float[] Coefficients;
        //The X coordinate to move from and to finish at
        public float StartX;
        public float FinishX;
        //The speed to move along the path
        public float Speed;

        private float currentX;

        /// <param name="coefficients">The values of the equation (passing in 1,2,3 would result in 1x² + 2x + 3 and passing in 1,2 would result in 1x + 2)</param>
        public AMathPath(float startX, float finishX, float speed, float[] coefficients)
        {
            //If there aren't enough parameters, then the equation won't work
            if (coefficients.Length < 2)
            {
                throw new ArgumentException("Not enough coefficients. The number must be at least 2.");
            }

            Coefficients = coefficients;
            StartX = startX;
            currentX = StartX;
            FinishX = finishX;
            Speed = speed;
        }

        protected override void UpdateAction(GameTime gameTime, Sprite sprite)
        {
            if ((StartX > FinishX && currentX - Speed < FinishX) || (StartX < FinishX && currentX + Speed > FinishX))
            {
                Stop(gameTime, sprite);
            }
            else
            {
                currentX += Speed;

                float y = 0;

                for (int i = Coefficients.Length - 1; i > -1; i-- )
                {
                    y += (float)Math.Pow(currentX, i) * Coefficients[Coefficients.Length - i - 1];
                }

                sprite.Position = new Vector2(currentX, y);
            }
        }

        public override Action Clone()
        {
            return new AMathPath(StartX, FinishX, Speed, Coefficients);
        }
    }
}
